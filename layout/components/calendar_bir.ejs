<!-- 生日日期選擇器 -->
<div class="birthday-date-picker-wrapper">
  <!-- 日期輸入框 -->
  <div class="birthday-date-input-container">
    <input
      type="text"
      class="birthday-date-input"
      id="birthdayDateDisplay"
      placeholder="請選擇生日"
      readonly
    />
    <span class="birthday-dropdown-arrow" id="birthdayDropdownArrow"
      ><img src="/assets/images/service/icon-select.svg" alt=""
    /></span>
  </div>

  <!-- 遮罩層 -->
  <div class="birthday-overlay" id="birthdayOverlay"></div>

  <!-- 月曆下拉框 -->
  <div class="birthday-calendar-container" id="birthdayCalendarContainer">
    <div class="calendar-header">
      <div class="month-nav">
        <div class="current-month" id="birthdayCurrentMonth"></div>
        <div class="nav-buttons">
          <button type="button" class="nav-btn" id="birthdayPrevBtn">‹</button>
          <button type="button" class="nav-btn" id="birthdayNextBtn">›</button>
        </div>
      </div>
    </div>

    <div class="calendar-body">
      <div class="weekdays">
        <div class="weekday">一</div>
        <div class="weekday">二</div>
        <div class="weekday">三</div>
        <div class="weekday">四</div>
        <div class="weekday">五</div>
        <div class="weekday">六</div>
        <div class="weekday">日</div>
      </div>
      <div class="calendar-days" id="birthdayCalendarDays"></div>
    </div>
  </div>

  <!-- 隱藏的表單輸入框 -->
  <input
    type="hidden"
    class="hidden-input"
    id="birthdaySelectedDateInput"
    name="birthday"
  />
</div>

<script>
  class BirthdayDatePicker {
    constructor(options = {}) {
      this.currentDate = new Date();
      this.selectedDate = null;
      this.today = new Date();
      this.isOpen = false;

      // 生日設定：不能選擇未來的日期
      this.minDate = null; // 沒有最小日期限制
      this.maxDate = new Date(); // 最大日期為今天

      this.elements = {
        dateInput: document.getElementById("birthdayDateDisplay"),
        dropdownArrow: document.getElementById("birthdayDropdownArrow"),
        overlay: document.getElementById("birthdayOverlay"),
        calendarContainer: document.getElementById("birthdayCalendarContainer"),
        currentMonth: document.getElementById("birthdayCurrentMonth"),
        prevBtn: document.getElementById("birthdayPrevBtn"),
        nextBtn: document.getElementById("birthdayNextBtn"),
        calendarDays: document.getElementById("birthdayCalendarDays"),
        hiddenInput: document.getElementById("birthdaySelectedDateInput"),
      };

      this.init();
    }

    init() {
      this.bindEvents();
      this.render();
    }

    bindEvents() {
      // 點擊輸入框展開/收合
      this.elements.dateInput.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggle();
      });

      // 點擊下拉箭頭也能展開/收合
      this.elements.dropdownArrow.addEventListener("click", (e) => {
        e.stopPropagation();
        this.toggle();
      });

      // 點擊遮罩層關閉
      this.elements.overlay.addEventListener("click", () => {
        this.close();
      });

      // 阻止月曆容器的點擊事件冒泡
      this.elements.calendarContainer.addEventListener("click", (e) => {
        e.stopPropagation();
      });

      // 月份導航按鈕
      this.elements.prevBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.currentDate.setMonth(this.currentDate.getMonth() - 1);
        this.render();
      });

      this.elements.nextBtn.addEventListener("click", (e) => {
        e.stopPropagation();
        this.currentDate.setMonth(this.currentDate.getMonth() + 1);
        this.render();
      });

      // ESC 鍵關閉
      document.addEventListener("keydown", (e) => {
        if (e.key === "Escape" && this.isOpen) {
          this.close();
        }
      });
    }

    clearSelection() {
      this.selectedDate = null;
      this.updateDateDisplay();
      this.updateHiddenInput();
      this.render();
    }

    toggle() {
      if (this.isOpen) {
        this.close();
      } else {
        this.open();
      }
    }

    open() {
      this.isOpen = true;
      this.elements.calendarContainer.classList.add("show");
      this.elements.overlay.classList.add("show");
      this.elements.dropdownArrow.classList.add("rotated");
      this.elements.dateInput.classList.add("active");
    }

    close() {
      this.isOpen = false;
      this.elements.calendarContainer.classList.remove("show");
      this.elements.overlay.classList.remove("show");
      this.elements.dropdownArrow.classList.remove("rotated");
      this.elements.dateInput.classList.remove("active");
    }

    render() {
      this.renderHeader();
      this.renderDays();
    }

    renderHeader() {
      const year = this.currentDate.getFullYear();
      const month = this.currentDate.getMonth();
      this.elements.currentMonth.textContent = this.getMonthName(month, year);
    }

    getMonthName(month, year) {
      const monthNames = [
        "一月",
        "二月",
        "三月",
        "四月",
        "五月",
        "六月",
        "七月",
        "八月",
        "九月",
        "十月",
        "十一月",
        "十二月",
      ];
      return `${monthNames[month]} ${year}`;
    }

    renderDays() {
      const year = this.currentDate.getFullYear();
      const month = this.currentDate.getMonth();
      const firstDay = new Date(year, month, 1);
      const lastDay = new Date(year, month + 1, 0);
      const daysInMonth = lastDay.getDate();

      // 調整為週一開始
      let startDate = (firstDay.getDay() + 6) % 7;

      this.elements.calendarDays.innerHTML = "";

      // 上個月的日期
      const prevMonth = new Date(year, month - 1, 0);
      for (let i = startDate - 1; i >= 0; i--) {
        const day = prevMonth.getDate() - i;
        const dayElement = this.createDayElement(day, "other-month");
        this.elements.calendarDays.appendChild(dayElement);
      }

      // 當月的日期
      for (let day = 1; day <= daysInMonth; day++) {
        const currentDateObj = new Date(year, month, day);
        const dayElement = this.createDayElement(
          day,
          "current-month",
          currentDateObj
        );

        // 檢查是否為今天
        if (this.isToday(year, month, day)) {
          dayElement.classList.add("today");
        }

        // 檢查是否為選中的日期
        if (
          this.selectedDate &&
          this.isSameDate(this.selectedDate, currentDateObj)
        ) {
          dayElement.classList.add("selected");
        }

        // 檢查是否為未來日期（生日不能選未來）
        if (this.isDateDisabled(currentDateObj)) {
          dayElement.classList.add("disabled");
        }

        this.elements.calendarDays.appendChild(dayElement);
      }

      // 下個月的日期
      const totalCells = Math.ceil((startDate + daysInMonth) / 7) * 7;
      const remainingCells = totalCells - (startDate + daysInMonth);
      for (let day = 1; day <= remainingCells; day++) {
        const dayElement = this.createDayElement(day, "other-month");
        this.elements.calendarDays.appendChild(dayElement);
      }
    }

    createDayElement(day, type, dateObj = null) {
      const dayElement = document.createElement("button");
      dayElement.className = `day ${type}`;
      dayElement.textContent = day;
      dayElement.type = "button";

      if (type === "current-month" && dateObj) {
        // 檢查日期是否被禁用（未來日期）
        if (this.isDateDisabled(dateObj)) {
          dayElement.disabled = true;
          dayElement.classList.add("disabled");
        } else {
          dayElement.addEventListener("click", (e) => {
            e.stopPropagation();
            this.selectDate(dateObj);
          });
        }
      }

      return dayElement;
    }

    selectDate(date) {
      this.selectedDate = date;
      this.updateDateDisplay();
      this.updateHiddenInput();
      this.render();
      this.close(); // 選擇後自動關閉

      // 觸發自訂事件
      const event = new CustomEvent("birthdaySelected", {
        detail: {
          date: date,
          formattedDate: this.formatDate(date),
        },
      });
      document.dispatchEvent(event);

      console.log("選中生日：", this.formatDate(date));
    }

    updateDateDisplay() {
      if (this.selectedDate) {
        this.elements.dateInput.value = this.formatDate(this.selectedDate);
        this.elements.dateInput.style.color = "#3E5E4E";
      } else {
        this.elements.dateInput.value = "";
        this.elements.dateInput.placeholder = "請選擇生日";
      }
    }

    updateHiddenInput() {
      if (this.selectedDate) {
        this.elements.hiddenInput.value = this.formatDate(
          this.selectedDate,
          "YYYY-MM-DD"
        );
      }
    }

    formatDate(date, format = "YYYY / MM / DD") {
      const year = date.getFullYear();
      const month = String(date.getMonth() + 1).padStart(2, "0");
      const day = String(date.getDate()).padStart(2, "0");

      return format
        .replace("YYYY", year)
        .replace("MM", month)
        .replace("DD", day);
    }

    isToday(year, month, day) {
      return (
        year === this.today.getFullYear() &&
        month === this.today.getMonth() &&
        day === this.today.getDate()
      );
    }

    isSameDate(date1, date2) {
      return (
        date1.getFullYear() === date2.getFullYear() &&
        date1.getMonth() === date2.getMonth() &&
        date1.getDate() === date2.getDate()
      );
    }

    // 檢查日期是否被禁用（未來的日期不能選）
    isDateDisabled(date) {
      const dateToCheck = new Date(
        date.getFullYear(),
        date.getMonth(),
        date.getDate()
      );
      const maxDate = new Date(
        this.maxDate.getFullYear(),
        this.maxDate.getMonth(),
        this.maxDate.getDate()
      );

      // 生日不能選擇未來的日期
      if (dateToCheck > maxDate) {
        return true;
      }

      return false;
    }

    // 公開方法
    getSelectedDate() {
      return this.selectedDate;
    }

    setSelectedDate(date) {
      this.selectedDate = date;
      this.currentDate = new Date(date);
      this.updateDateDisplay();
      this.updateHiddenInput();
      this.render();
    }

    getFormattedDate() {
      return this.selectedDate ? this.formatDate(this.selectedDate) : "";
    }

    getValue() {
      return this.elements.hiddenInput.value;
    }
  }

  // 初始化生日日期選擇器
  const birthdayPicker = new BirthdayDatePicker();

  // 監聽生日選擇事件
  document.addEventListener("birthdaySelected", function (event) {
    console.log("用戶選擇了生日：", event.detail.formattedDate);
    console.log("表單值：", birthdayPicker.getValue());
  });
</script>
